#coding: utf-8
"""
Ввод в вывод. формат данных

Стандартные потоки:
stdin - стандартный поток ввода
    input()
    sys.stdin()
stdout - стандартный поток вывода
    print()
    sys.stdout()
stderr - стандартный поток ошибок
    все ошибки
    sys.stderr

Питон по-умолчанию буферизует то, что выводит в stdout (но буферизацию можно отключать)

Стандартные потоки используются в Линуксе и других Unix системах
эти и те потоки можно взаимоиспользовать, что дает довольно мощный инструментарий


та работы с файлами, которую мы сейчас изучим, никакого отношения к этим потокам не имеет))


Файлы

open(<путь_к_файлу> [, <режим>]) - транслирует свое поведение к системе (ко всем по своему)

"""

f = open("out.txt", "w") #относительные пути работают быстрее, чем абсолютные; режим - это строка.
#функция open сохраняет дискриптер (некоторый объект, к которому нельзя работать напрямую) I/Oobject


f.write("привет")
f.write("123\n")
f.write("\n")
f.write("456\n")
f.writelines(["d","c"])

#если открыли, то нужно и закрыть!!!
#все, что записывается в файл - должно быть строкой

f.close() #- закрыть файл
"""
разберемся с режимами
режимы записи:
w - открывает файл на запись, если он не существует, то создается, если существует , то он перезаписывается
a - дозапись файла, если не существует, то создается, если существует, то запись идет в конец
x - если файл не существует, то он создается, если файл существует, то возбуждается исключение

режимы чтения:
r - открывает файл на чтение (режим по-умолчанию)? если файла - нет, то будет ошибка
w+ - + - это возможность чтения, можно добавить к другим режимам
a+
x+

b - бинарный (двоичный режим), запись должна быть байтовой, чтение - необязательно
"""

# strip() - метод игнорирования символом форматирования
f = open("out.txt", "r")
print(f.readlines()) #прочитать файл построчно в список(строк)

f.seek(0) #метод перемещения "курсора" по файлу (0 - начало файла) - аргумент - смещение, относительно начала файла в байтах
#(1байт - один символ для ангийского языка, для текстовых файлов)

print("Текущая позиция курсора", end=" ")
print(f.tell()) #поучить текущую позицию курсора

print("Все в одну строку")
print(f.read()) #прочитать файл целиком в строку, но если передать аргумент, то прочитается указанное количество символов

f.seek(0)   #Итерируем список
print("Итерируем список")
for line in f.readlines():
    print(line.strip()+"hmm")

f.seek(0)   #итерируем файл по строкам
for line in f:
    print(line)

f.close()

"""
контекстный менеджер или менеджер контекста.
"""
#with open("main.py") as f:  #используется для методов, которые можно закрыть. f существует пока работает тело контекста
#    print(f.readlines())

"""
форматы данных.
"""


#Pickle - нативный формат питона (работает быстрее, чем универсальеы форматы
import pickle

data = {
        "users" : [
            {"id" : 1,
             "name" : "Linux Torvalds",
             "skills": ("C++", "Linux")
             },
            {"id" : 2,
             "name" : "Richard Stallman",
             "skills": ("C++", "C", "GNU")
             }
            ]
        }

with open("users.pickle", "wb") as f: #pickle - расширение
    pickle.dump(data, f) #записывает как есть dumps - в строку

with open("users.pickle", "rb") as f:
    
    print("Данные прочитаны из pickle файла: {}\n".format(pickle.load(f))) #тут можно поиграть с форматом...
    

#JSON - явыскриптный формат (JavaScript Object Notation)
import json
with open("users.json", "w") as f:      #только в режиме перезаписи
    json.dump(data, f)

with open("users.json") as f: #json любит словари, все ключи - обязательно в кавычках, нет None, но есть Null

    print("Данные прочитаны из json файла: {}\n".format(json.load(f)))


#CSV
import csv

"id; name; age"
"1; Linus Torvals; 666"

with open("users.csv", "w") as f:
    users = data.get("users", {})
    fieldnames = users[0].keys()

    writer = csv.DictWriter(f, fieldnames=fieldnames)
    writer.writeheader()

    for user in users:
        writer.writerow(user)

with open("users.csv") as f:
    reader = csv.DictReader(f)

    for row in reader:
        print("Данные прочитаны из CSV файл: {}\n".format(
            row
            ))

#Ini - формат конфигурационных файлов
"""
формат:
ключ = значение

db.host = localhost
db.user = root
[db]
host = localhost
user = root

в питоне есть класс config parser, но читает криво. записать ини файл в питоне можно только вручную
"""

#XML - extened market language - расширенный язык разметки
#пенсионер, который еще ходит на работу


#SQLite3 - база данных в файле. используется синтаксис SQL, реляционные базы данных?будем проходить в понедельник
#мультиплатформенный, удобный формат
